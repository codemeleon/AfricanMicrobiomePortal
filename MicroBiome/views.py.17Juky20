#!/usr/bin/env python


"""MicroBiome Pages.

All the view Related to Microbiome will be will be written herobiome wbe will
be written here.
"""

import numpy as np
import pandas as pd

# For pagination
#  from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator
from django.db.models import Count, Q
from django.shortcuts import render
from django_pandas.io import read_frame

#  from django_tables2.config import RequestConfig
#  from .djmodel import get_model_repr
# Create your views here.
#  from .models import Movie, Person
from .forms import PostForm, Upload
from .models import (Amplicon, Assay, Disease, LocEthDiet, Platform, Project,
                     Samples, TestProject)
from .query_corrector import (amplicon_correct, assay_correct, loc_correct,
                              platform_correct)

#  from django_tables2 import RequestConfig


#  from django.template import Context, loader
# https://docs.djangoproject.com/en/3.0/topics/http/file-uploads/
def _savefile(infile):
    with open("test.txt", "wb+") as fout:
        for chunk in infile.chunks():
            fout.write(chunk)


def upload_file(request):
    if request.method == 'POST':
        #  print("Kiran")
        formx = Upload(request.POST, request.FILES)
        #  print(request)
        if formx.is_valid():
            _ = _savefile(request.FILES['infile'])
            sep = formx.data["separator"]
            #  print("Anmol", sep)
            try:
                is_csv = len(open("test.txt").readline().split(sep))
                if not is_csv:
                    return render(request, 'warning2.html', {})
                df = pd.read_csv("test.txt", sep=sep)
                # Must have colums
                must_have_colums = set(["REPOSITORY ID",
                                        "STUDY TITLE",
                                        #  "REPOSITORY LINK",
                                        "SAMPLE NUMBER",
                                        "STUDY LINK",
                                        "ASSAY TYPE",
                                        "TECHNOLOGY",
                                        "COUNTRY",
                                        "DISEASE",
                                        "STUDY DESIGN",
                                        "BODY SITE",
                                        "PLATFORM",
                                        "PARTICIPANT FEATURES",
                                        #  "AVERAGE SPOTLENGTH",
                                        "LIBRARY LAYOUT",
                                        "LON LAT",
                                        "SAMPLE TYPE",
                                        "COLLECTION DATE",
                                        "ETHNICITY",
                                        "URBANZATION",
                                        "REGION",
                                        "CITY",
                                        "TARGET AMPLICON",
                                        "DIET"
                                        ])
                column_not_found = must_have_colums - set(df.columns)
                if column_not_found:
                    return render(request, 'warning.html',
                                  {'columns': column_not_found})
                    #  print(column_not_found)
                df_dict = {}

                for col in must_have_colums:
                    #  print(col)
                    # Unknown
                    col_val = Project.objects.order_by().values_list(
                        col.replace(" ", "_").lower()).distinct()
                    #  print(col_val)
                    updated_list = []
                    for val in set(df[col]):
                        if (val,) in col_val:
                            updated_list.append(str(val))
                        else:
                            updated_list.append(str(val)+"*")
                    df_dict[col] = updated_list
                return render(request, 'overview.html', {'results': df_dict})
            except:
                return render(request, 'warning2.html', {})

    else:
        formx = Upload()
    return render(request, "uploads.html", {'form': formx})

# Create your views here.


def project_update(df):
    # Make everything in uppcase
    for _, row in df.drop_duplicates("REPOSITORY ID").iterrows():
        if not TestProject.objects.filter(repoid__exact=row["REPOSITORY ID"]):
            TestProject.objects.get_or_create(
                repoid=row["REPOSITORY ID"],
                repo=row["REPOSITORY LINK"],
                title=row["STUDY TITLE"],
                sample_size=None if pd.isna(
                    row["SAMPLE NUMBER"]) else row["SAMPLE NUMBER"]
            )


def loc_eth_diest_update(df):
    for _, row in df.drop_duplicates(
            ["COUNTRY", "REGION", "URBANZATION", "CITY_VILLAGE",
                "ETHNICITY", "DIET", "LON", "LAT"]).iterrows():
        print(row)
        LocEthDiet.objects.get_or_create(
            country=row['COUNTRY'],
            region=row['REGION'],
            urbanization=row['URBANZATION'],
            cityvillage=row['CITY_VILLAGE'],
            ethnicity=row['ETHNICITY'],
            diets=row['DIET'],
            lon=row['LON'],
            lat=row['LAT']
        )


def platform_update(df):
    for _, row in df.drop_duplicates(
            ["PLATFORM"]).iterrows():
        Platform.objects.get_or_create(
            platform=row['PLATFORM'])


def assay_update(df):
    for _, row in df.drop_duplicates(
            ["ASSAY TYPE"]).iterrows():
        Assay.objects.get_or_create(
            assay=row['ASSAY TYPE']
        )


def amplicon_update(df):
    for _, row in df.drop_duplicates(
            ["TARGET AMPLICON"]).iterrows():
        Amplicon.objects.get_or_create(
            amplicon=row['TARGET AMPLICON']
        )


def sample_update(df):
    for _, row in df.drop_duplicates("Run ID").iterrows():

        if not Samples.objects.filter(sampid__exact=row["Run ID"]):
            locdiet = loc_correct(row[["COUNTRY", "REGION", "URBANZATION",
                                       "CITY_VILLAGE", "ETHNICITY", "DIET",
                                       "LON", "LAT"]])
            platform = platform_correct(row[["PLATFORM"]])
            assay = assay_correct(row[["ASSAY TYPE"]])
            amplicon = amplicon_correct(row[["TARGET AMPLICON"]])
            #  platform = platform_correct(["PLATFORM"])
            print(row["Run ID"], "Acbnol kiran")
            print(platform["PLATFORM"], "Foolish Anmololol")
            samp = Samples.objects.create(
                sampid=row["Run ID"],
                avspotlen=None if pd.isna(
                    row["AVERAGE SPOTLENGTH"]) else row["AVERAGE SPOTLENGTH"],
                coldate=row["COLLECTION DATE"],
                locetdiet=LocEthDiet.objects.filter(
                    country__exact=locdiet["COUNTRY"],
                    region__exact=locdiet["REGION"],
                    urbanization__exact=locdiet["URBANZATION"],
                    cityvillage__exact=locdiet["CITY_VILLAGE"],
                    ethnicity__exact=locdiet["ETHNICITY"],
                    diets__exact=locdiet["DIET"],
                    lon__exact=locdiet["LON"],
                    lat__exact=locdiet["LAT"]
                )[0],
                platform=Platform.objects.filter(
                    platform__exact=platform["PLATFORM"])[0],
                assay=Assay.objects.filter(
                    assay__exact=assay["ASSAY TYPE"])[0],
                amplicon=Amplicon.objects.filter(
                    amplicon__exact=amplicon["TARGET AMPLICON"])[0],
                project=TestProject.objects.filter(
                    repoid=row["REPOSITORY ID"])[0]

            )
            if pd.isna(row["DISEASE"]):
                dis = Disease.objects.filter(disease="nan", doid=None)
                samp.disease.add(*dis)
            elif pd.isna(row["DOID"]):
                diseases = row["DISEASE"].split(",")
                for di in diseases:
                    dis = Disease.objects.filter(disease=di, doid=None)
                    samp.disease.add(*dis)
            else:
                diseases = row["DISEASE"].split(",")
                doids = row["DOID"].split(",")
                if len(diseases) == len(doids):
                    for di, do in zip(diseases, doids):
                        tdo = do.split(":")
                        if len(tdo) > 1:
                            tdo = int(tdo[1])
                        else:
                            tdo = None
                        dis = Disease.objects.filter(
                            disease=di,
                            doid=tdo
                        )
                        samp.disease.add(*dis)


def disease_update(df):
    # Many to , many
    for _, row in df.drop_duplicates(
            ['DISEASE', 'DOID']).iterrows():
        print(row, "Vwarsha")
        if pd.isna(row["DISEASE"]):
            Disease.objects.get_or_create(disease="nan", doid=None)
        elif pd.isna(row["DOID"]):
            diseases = row["DISEASE"].split(",")
            for di in diseases:
                Disease.objects.get_or_create(disease=di, doid=None)
        else:
            diseases = row["DISEASE"].split(",")
            doids = row["DOID"].split(",")
            if len(diseases) == len(doids):
                for di, do in zip(diseases, doids):
                    tdo = do.split(":")
                    if len(tdo) > 1:
                        tdo = int(tdo[1])
                    else:
                        tdo = None
                    Disease.objects.get_or_create(
                        disease=di,
                        doid=tdo
                    )


def update_counts():
    pass


def pubmed_update():
    pass


def test_update2():
    df = pd.read_csv("/home/devil/Documents/Tools/Database/Data/test2.csv")
    table_order = ["TestProject", "Assay", "Amplicon", "LocEthDiet",
                   "Platform", "Disease",
                   "Samples"
                   ]
    for tab in table_order:
        if tab == "TestProject":
            project_update(df)
        elif tab == "Samples":
            sample_update(df)
        elif tab == "LocEthDiet":
            loc_eth_diest_update(df)
        elif tab == "Platform":
            platform_update(df)
        elif tab == "Amplicon":
            amplicon_update(df)
        elif tab == "Assay":
            assay_update(df)
        elif tab == "Disease":
            #  pass
            disease_update(df)

        else:
            continue
    #  for _, row in df.drop_duplicates(
    #          ["COUNTRY", "REGION", "URBANZATION", "CITY_VILLAGE",
    #              "ETHNICITY", "DIET", "LON", "LAT"]).iterrows():
    #      if not LocEthDiet.objects.filter(
    #          country__exact=row["COUNTRY"],
    #          region__exact=row["REGION"],
    #          urbanization__exact=row["URBANZATION"],
    #          cityvillage__exact=row["CITY_VILLAGE"],
    #          ethnicity__exact=row["ETHNICITY"],
    #          diets__exact=row["DIET"],
    #          lon__exact=row["LON"],
    #          lat__exact=row["LAT"]
    #      ):
    #          print(row)
    #          print("Anmol Kiran")
    #      else:
    #          print("Kiran")
    #

#  def test_update():
#      df = pd.read_csv("/home/devil/Documents/Tools/Database/Data/test.csv")
#      predef_names = set(['REPOSITORY ID', 'STUDY TITLE', 'STUDY LINK', 'ASSAY TYPE',
#                          'TECHNOLOGY', 'COUNTRY', 'DISEASE', 'STUDY DESIGN', 'BODY SITE',
#                          'PLATFORM', 'PARTICIPANT FEATURES', 'LIBRARY LAYOUT', 'LON LAT',
#                          'SAMPLE TYPE', 'COLLECTION DATE', 'ETHNICITY', 'URBANZATION', 'REGION',
#                          'CITY', 'TARGET AMPLICON', 'DIET', 'SAMPLE NUMBER'])
#      if len(predef_names-set(df.columns)):
#          print(predef_names-set(df.columns),
#                "are not table columns names in gven table")
#          #  exit("Exiting.....")
#      for _, row in df.iterrows():
#          print(row)
#          #  continue
#          #  print(row['repository'])
#          created = Project.objects.get_or_create(
#              repository_id=row["REPOSITORY ID"],  # max length was 11
#              study_title=row["STUDY TITLE"],
#              study_link=row["STUDY LINK"],
#              assay_type=row["ASSAY TYPE"],
#              technology=row['TECHNOLOGY'],
#              country=row["COUNTRY"],
#              disease=row["DISEASE"],
#              study_design=row["STUDY DESIGN"],
#              body_site=row["BODY SITE"],
#              platform=row["PLATFORM"],
#              participant_features=row['PARTICIPANT FEATURES'],
#              library_layout=row['LIBRARY LAYOUT'],
#              lon_lat=row['LON LAT'],
#              sample_type=row["SAMPLE TYPE"],
#              collection_date=row["COLLECTION DATE"],
#              ethnicity=row['ETHNICITY'],
#              urbanzation=row["URBANZATION"],
#              region=row["REGION"],
#              city=row["CITY"],
#              target_amplicon=row["TARGET AMPLICON"],
#              diet=row["DIET"],
#              sample_number=row["SAMPLE NUMBER"]
#          )
#
    #  df = pd.read_csv(
    #      "/home/devil/Documents/Tools/Database/MicroBiome/test.csv")
    #
    #  for _, row in df.iterrows():
    #      print(row)
    #      #  print(row['repository'])
    #      created = Project.objects.get_or_create(
    #          sample_count=row["SAMPLE_COUNT"],
    #          repository_id=row["REPOSITORY_ID"],  # max length was 11
    #          study_title=row["STUDY_TITLE"],
    #          study_link=row["STUDY_LINK"],
    #          assay_type=row["ASSAY_TYPE"],
    #          platform=row["PLATFORM"],
    #          country=row["COUNTRY"],
    #          disease=row["DISEASE"],
    #          study_design=row["STUDY_DESIGN"],
    #          body_site=row["BODY_SITE"],
    #          lon=row["LON"],
    #          lat=row["LAT"],
    #          repo=row["REPO"],
    #          sample_type=row["SAMPLE_TYPE"],
    #      )
    #
    #
#  def search_form(request):
#      return render(request, "mainLayout.html", {})
#


def search_form(request):
    form = PostForm()
    #  test_update2()
    #  print(form.as_p, "Anmol")
    all_records = Project.objects.all()
    df = read_frame(all_records)
    df = df.loc[:,  # ~(pd.isnull(df.lat) | pd.isnull(df.lon)),
                ['lon_lat', 'sample_type', 'disease', 'platform',
                 'country', 'sample_number', 'body_site', 'assay_type']]
    dft = df.groupby("body_site")['sample_number'].apply(np.sum).reset_index()
    print(dft.head())
    site_pie_dict = [{'name': item['body_site'],
                      'y': item['sample_number']} for _, item in dft.iterrows()]
    #  print(site_pie_dict)

    # Platforms
    platforms = Platform.objects.annotate(num_samples=Count("samples"))

    platform_pie_dict = [{'name': plts.platform,
                          'y': plts.num_samples} for plts in platforms
                         if plts.platform != "nan"]

    # ASSAY

    assays = Assay.objects.annotate(num_samples=Count("samples"))

    assay_pie_dict = [{'name': assay.assay,
                       'y': assay.num_samples} for assay in assays
                      if assay.assay != "nan"]

    # DISEASES
    diseases = Disease.objects.annotate(num_samples=Count("samples"))

    disease_pie_dict = [{'name': disease.disease,
                         'y': disease.num_samples} for disease in diseases
                        if disease.disease != "nan"]

    # GEO LOCATION
    geoloc = pd.DataFrame(LocEthDiet.objects.values(
        "lon", "lat").annotate(num_samples=Count("samples")))
    geoloc = geoloc[~(pd.isna(geoloc.lat) | pd.isna(geoloc.lon))]

    context = {'form': form,
               'assay_pie_dict': assay_pie_dict,
               'disease_pie_dict': disease_pie_dict,
               'platform_pie_dict': platform_pie_dict,
               'site_pie_dict': site_pie_dict,
               'records': geoloc}
    #  print(all_records.values())
    return render(request, "search.html", context)

    #  return render(request, "search.html", {"form": form})


#  def results_download(request):
#      if request.method == "GET":
#          form = PostForm(request.GET)
#          print("Anmol", form)
#          if form.is_valid():
#              print("Kiran")
#          country = form.cleaned_data["country"]
#          platform = form.cleaned_data["platform"]
#          disease = form.cleaned_data["disease"]
#          study_design = form.cleaned_data["study_design"]
#          #  page = request.GET.get('page', 1)
#          res = Project.objects.all()
#          if country:
#              res = res.filter(country__icontains=country)
#          if platform:
#              res = res.filter(platform__icontains=country)
#          if disease:
#              res = res.filter(disease__icontains=country)
#          if study_design:
#              res = res.filter(study_design__icontains=country)
#          csv = pd.DataFrame(list(res.values()))
#          print(csv)
#          csv = csv.to_csv(index=False)
#          print(csv)
#          return render(request, "csv.html", {'csv': csv})
#
def sample_results(request):
    # Try https://github.com/jamespacileo/django-pure-pagination
    if request.method == "GET":
        form = PostForm(request.GET)

        try:
            tags = form.data["tags"]
            tags = tags.split(",")
        except KeyError:
            tags = None

        if not tags:
            res = TestProject.objects.all()
        else:
            qs = [
                #  Q(country__icontains=tag)|
                #  Q(platform__icontains=tag)|
                #  Q(disease__icontains=tag)|
                #  Q(study_design__icontains=tag)|
                #  Q(study_title__icontains=tag)|
                #  Q(sample_type__icontains=tag)
                Q(repoid__icontains=tag) |
                Q(title__icontains=tag)  # |
                #  Q(study_link__icontains=tag) |
                #  Q(assay_type__icontains=tag) |
                #  Q(technology__icontains=tag) |
                #  Q(country__icontains=tag) |
                #  Q(disease__icontains=tag) |
                #  Q(study_design__icontains=tag) |
                #  Q(body_site__icontains=tag) |
                #  Q(platform__icontains=tag) |
                #  Q(participant_features__icontains=tag) |
                #  Q(library_layout__icontains=tag) |
                #  Q(lon_lat__icontains=tag) |
                #  Q(sample_type__icontains=tag) |
                #  Q(collection_date__icontains=tag) |
                #  Q(ethnicity__icontains=tag) |
                #  Q(urbanzation__icontains=tag) |
                #  Q(region__icontains=tag) |
                #  Q(city__icontains=tag) |
                #  Q(target_amplicon__icontains=tag) |
                #  Q(diet__icontains=tag) |
                #  Q(sample_number__icontains=tag)
                for tag in tags]
            query = qs.pop()
            for q in qs:
                query |= q

            res = TestProject.objects.filter(query)
        df = read_frame(res)
        del df['id']
        df2 = {}
        for col in df.columns:
            df2[col] = []
            for repid in set(df['repoid']):
                # TODO: Correct mgp12183  database links
                if col not in ['repoid', 'repo', 'title',
                               'sample_size']:
                    val = ";".join([
                        f"<a href='/microbiome/results/?tags={val}'>{val}</a>"
                        for val in map(str,
                                       list(set(df.loc[df['repoid'] ==
                                                       repid, col].values)))])
                else:
                    val = ";".join(
                        map(str, list(set(df.loc[df['repoid'] == repid,
                                                 col].values))))
                df2[col].append(val)
        del df
        df2 = pd.DataFrame(df2)
        #  print(set(df2["diet"]))

        res_count = len(res)
        query = ""
        for k, v in form.data.items():
            query += "%s=%s&" % (k, v)
        return render(request, "results.html", {'results': df2,
                                                'res_count': res_count,
                                                'query': query[: -1]})





def results(request):
    # Try https://github.com/jamespacileo/django-pure-pagination
    if request.method == "GET":
        form = PostForm(request.GET)

        try:
            tags = form.data["tags"]
            tags = tags.split(",")
        except KeyError:
            tags = None

        if not tags:
            res = TestProject.objects.all()
        else:
            qs = [
                #  Q(country__icontains=tag)|
                #  Q(platform__icontains=tag)|
                #  Q(disease__icontains=tag)|
                #  Q(study_design__icontains=tag)|
                #  Q(study_title__icontains=tag)|
                #  Q(sample_type__icontains=tag)
                Q(repoid__icontains=tag) |
                Q(title__icontains=tag)  # |
                #  Q(study_link__icontains=tag) |
                #  Q(assay_type__icontains=tag) |
                #  Q(technology__icontains=tag) |
                #  Q(country__icontains=tag) |
                #  Q(disease__icontains=tag) |
                #  Q(study_design__icontains=tag) |
                #  Q(body_site__icontains=tag) |
                #  Q(platform__icontains=tag) |
                #  Q(participant_features__icontains=tag) |
                #  Q(library_layout__icontains=tag) |
                #  Q(lon_lat__icontains=tag) |
                #  Q(sample_type__icontains=tag) |
                #  Q(collection_date__icontains=tag) |
                #  Q(ethnicity__icontains=tag) |
                #  Q(urbanzation__icontains=tag) |
                #  Q(region__icontains=tag) |
                #  Q(city__icontains=tag) |
                #  Q(target_amplicon__icontains=tag) |
                #  Q(diet__icontains=tag) |
                #  Q(sample_number__icontains=tag)
                for tag in tags]
            query = qs.pop()
            for q in qs:
                query |= q

            res = TestProject.objects.filter(query)
        df = read_frame(res)
        del df['id']
        df2 = {}
        for col in df.columns:
            df2[col] = []
            for repid in set(df['repoid']):
                # TODO: Correct mgp12183  database links
                if col not in ['repoid', 'repo', 'title',
                               'sample_size']:
                    val = ";".join([
                        f"<a href='/microbiome/results/?tags={val}'>{val}</a>"
                        for val in map(str,
                                       list(set(df.loc[df['repoid'] ==
                                                       repid, col].values)))])
                else:
                    val = ";".join(
                        map(str, list(set(df.loc[df['repoid'] == repid,
                                                 col].values))))
                df2[col].append(val)
        del df
        df2 = pd.DataFrame(df2)
        #  print(set(df2["diet"]))

        res_count = len(res)
        query = ""
        for k, v in form.data.items():
            query += "%s=%s&" % (k, v)
        return render(request, "results.html", {'results': df2,
                                                'res_count': res_count,
                                                'query': query[: -1]})
    else:
        form = PostForm()

        all_records = Project.objects.all()
        df = read_frame(all_records)
        df = df.loc[~(pd.isnull(df.lat) | pd.isnull(df.lon)),
                    ['lon', 'lat', 'sample_type', 'disease', 'platform',
                     'country', 'sample_count']]
        site_pie_dict = [{'name': item['body_site'],
                          'y': item['type_count']} for item in
                         all_records.values('body_site')
                         .annotate(type_count=Count('body_site'))]
        #  print(site_pie_dict)

        platform_pie_dict = [{'name': item['platform'],
                              'y': item['type_count']}
                             for item in all_records.values('platform')
                             .annotate(type_count=Count('sample_type'))]

        assay_type = pd.DataFrame(list(all_records.values(
            'assay_type').annotate(type_count=Count('sample_type'))))
        xdata_assay = list(assay_type['assay_type'])
        ydata_assay = list(assay_type['type_count'])

        disease = pd.DataFrame(list(all_records.values(
            'disease').annotate(type_count=Count('disease'))))
        xdata_disease = list(disease['disease'])
        ydata_disease = list(disease['type_count'])
        print("anmol")

        context = {  # 'form':form,
            'xdata_assay': xdata_assay,
            'ydata_assay': ydata_assay,
            'xdata_disease': xdata_disease,
            'ydata_disease': ydata_disease,
            'platform_pie_dict': platform_pie_dict,
            'site_pie_dict': site_pie_dict,
            'records': df}
        #  print(all_records.values())
        return render(request, "search.html", context=context)

        #  return render(request, 'dashboard.html', context=context)


#  def results(request):
#      # Try https://github.com/jamespacileo/django-pure-pagination
#      if request.method == "GET":
#          form = PostForm(request.GET)
#          #  print(form.cleaned_data)
#          #  if form.is_valid():
#          #      print("Kiran", form.cleaned_data)
#          #  print(form.data['country'])
#          try:
#              country = form.data["country"]
#          except KeyError:
#              country = None
#          try:
#              tags = form.data["tags"]
#              print(tags.split(","))
#          except KeyError:
#              tags = None
#
#
#
#          try:
#              platform = form.data["platform"]
#          except KeyError:
#              platform = None
#          try:
#              disease = form.data["disease"]
#          except KeyError:
#              disease = None
#          try:
#              study_design = form.data["study_design"]
#          except KeyError:
#              study_design = None
#          #  page = request.GET.get('page', 1)
#          res = Project.objects.all()
#          if country:
#              res = res.filter(country__icontains=country)
#          if platform:
#              res = res.filter(platform__icontains=platform)
#          if disease:
#              res = res.filter(disease__icontains=disease)
#          if study_design:
#              res = res.filter(study_design__icontains=study_design)
#
#
#  #  posts = serverlist.objects.filter(
#  #       Q(Project__icontains=query)|Q(ServerName__icontains=query)
#  #  )
#  #  from django.db.models import Q
#  #  #get the current_user
#  #  current_user = request.user
#  #  keywords=  ['funny', 'old', 'black_humor']
#  #  qs = [Q(title__icontains=keyword)|Q(author__icontains=keyword)|Q(tags__icontains=keyword) for keyword in keywords]
#  #
#  #  query = qs.pop() #get the first element
#  #
#  #  for q in qs:
#  #      query |= q
#  #  filtered_user_meme = Meme.objects.filter(query, user=current_user)
#  #
#          res_count = len(res)
#          query = ""
#          for k, v in form.data.items():
#              query += "%s=%s&" % (k, v)
#          return render(request, "results.html", {'results': res, 'res_count': res_count,  'query': query[:-1]})
#      else:
#          form = PostForm()
#
#          all_records=Project.objects.all()
#          df = read_frame(all_records)
#          df = df.loc[~(pd.isnull(df.lat) | pd.isnull(df.lon)),
#                  ['lon', 'lat', 'sample_type', 'disease','platform',
#                      'country','sample_count']]
#          site_pie_dict = [{'name': item['body_site'],
#                              'y': item['type_count']} for item in \
#                                      all_records.values('body_site')\
#                                      .annotate(type_count=Count('body_site')) ]
#          #  print(site_pie_dict)
#
#          platform_pie_dict = [{'name': item['platform'], 'y': item['type_count'] } for item in all_records.values('platform').annotate(type_count=Count('sample_type')) ]
#
#          assay_type=pd.DataFrame(list(all_records.values('assay_type').annotate(type_count=Count('sample_type'))))
#          xdata_assay=list(assay_type['assay_type'])
#          ydata_assay=list(assay_type['type_count'])
#
#          disease=pd.DataFrame(list(all_records.values('disease').annotate(type_count=Count('disease'))))
#          xdata_disease=list(disease['disease'])
#          ydata_disease=list(disease['type_count'])
#          print("anmol")
#
#          context={#'form':form,
#                  'xdata_assay': xdata_assay,
#                  'ydata_assay': ydata_assay,
#                  'xdata_disease': xdata_disease,
#                  'ydata_disease': ydata_disease,
#                  'platform_pie_dict': platform_pie_dict,
#                  'site_pie_dict': site_pie_dict,
#                  'records': df};
#          #  print(all_records.values())
#          return render(request, "search.html", context=context)
#
#          #  return render(request, 'dashboard.html', context=context)

#  def summary(request):
#      all_records = Project.objects.all()
#      df = read_frame(all_records)
#      df = df.loc[~(pd.isnull(df.lat) | pd.isnull(df.lon)),
#                  ['lon', 'lat', 'sample_type', 'disease', 'platform',
#                   'country', 'sample_count']]
#      site_pie_dict = [{'name': item['body_site'],
#                        'y': item['type_count']} for item in
#                       all_records.values('body_site')
#                       .annotate(type_count=Count('body_site'))]
#      #  print(site_pie_dict)
#
#      platform_pie_dict = [{'name': item['platform'], 'y': item['type_count']}
#                           for item in all_records.values('platform').annotate(type_count=Count('sample_type'))]
#
#      assay_type = pd.DataFrame(list(all_records.values(
#          'assay_type').annotate(type_count=Count('sample_type'))))
#      xdata_assay = list(assay_type['assay_type'])
#      ydata_assay = list(assay_type['type_count'])
#
#      disease = pd.DataFrame(list(all_records.values(
#          'disease').annotate(type_count=Count('disease'))))
#      xdata_disease = list(disease['disease'])
#      ydata_disease = list(disease['type_count'])
#
#      context = {'xdata_assay': xdata_assay,
#                 'ydata_assay': ydata_assay,
#                 'xdata_disease': xdata_disease,
#                 'ydata_disease': ydata_disease,
#                 'platform_pie_dict': platform_pie_dict,
#                 'site_pie_dict': site_pie_dict,
#                 'records': df}
#      #  print(all_records.values())
#
#      return render(request, 'dashboard.html', context=context)


#  def summary(request):
#      """The Database Summary Page.
#      """
#      df = "/home/devil/Documents/Tools/Database/MicroBiome/test.csv"
#      all_records = pd.read_csv(
#          df,
#          usecols=["LON", "LAT", "SAMPLE_TYPE", "DISEASE", "PLATFORM", "COUNTRY", "SAMPLE_COUNT"])
#      all_records = all_records[~pd.isnull(all_records.LON)]
#
#      print(all_records.head().T.to_dict().values())
#      data = all_records.head().to_csv()
#      #  all_records = Project.objects.all()
#      #  return render(request, 'index.html', {'records': all_records,
#      return render(request, 'pivottablejs.html', {'records': all_records,
#                                            'data': data})
